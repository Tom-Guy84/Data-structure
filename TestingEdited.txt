//by Ziv
Init 
//addGroup
AddGroup 1 //success
AddGroup 1 //failure
AddGroup 3 //success
//addPlayer ( playerId , GroupID , Level)
//need to add here Invalid Input 
AddPlayer 1 1 1 //success
AddPlayer 1 1 1 //failure (same id, same group, same level)
AddPlayer 1 1 3 //failure (same id ,different level)
AddPlayer 1 3 1 //failure (same id, different Group(that exists),same level)
AddPlayer 1 3 3 // failure (same id, different Group(that exists),other level)
AddPlayer 1 2 1 //failure( same id, different Group(doesn’t exist),same  level)
AddPlayer 1 2 3 // failure (same id, different Group(doesn’t exist), other level
AddPlayer 2 3 1 //success (same id ,different Group (exists),same level)
AddPlayer 3 1 3 //success (same id , different Group(exists),different level)
AddPlayer 1 1 1 //failure (just trying again after adding another one)
Quit //end of AddPlayerTesting&AddGroup.
//RemovePlayer(playerId)
Init
AddGroup 1 //full group
AddGroup 2 //empty group
AddPlayer 1 1 1 // SUCCESS(just adding players)
RemovePlayer 1 //success
RemovePlayer 1 //failure(trying to remove twice)
AddPlayer 1 1 1 // success
AddPlayer 3 1 2 //success
RemovePlayer 1 // sucess(trying to remove from non empty group)
RemovePlayer 3//success
RemovePlayer 3 // failure(trying to remove again for sports)
RemovePlayer 2 //failure (trying to remove non existent player)
RemovePlayer 2 //failure (trying again for the sports)
AddPlayer 2 2 2 //success (adding him)
RemovePlayer 2 // success(removing  him)
RemovePlayer 2// failure(doesn;t exists)
AddPlayer 1 2 1 //sucesss (adding him again to anoter group)
RemovePlayer 1 //sucess
RemovePlayer 1 //failure (for sports)
Quit //end of RemovePlayer
//replaceGroups
Init
//ReplaceGroup(int GroupId,int ReplacementID) REPLACEMENT GETS GROUPID'S players.
AddGroup 1// success
AddGroup 2 //success
ReplaceGroup 1 -2 //Invalid Input
ReplaceGroup -2 1 //Invalid Input
ReplaceGroup 1  1 //Invalid Input.
ReplaceGroup 1 2 //success
ReplaceGroup 2 1 //failure (trying to reach non-exisstent group)
AddPlayer 1 1 1 //failure( Group 1 doesn't exist)
RemovePlayer 1 //failure(Player 1 doesn't exist
AddPlayer 1 2 1 //success (Group 2 still exists)
RemovePlayer 1 //successs (Group 2 still exists)
AddGroup 1 // success
ReplaceGroup 2 1 //sucess( now group 2 doesn't exist)
AddPlayer 3 2 1 // failure (Group 2 doesn't exist)
RemovePlayer 3 //failure (player 3 doesn't exist)
//next testing , two whole groups.
AddGroup 2 // success
AddPlayer 4 2 1 //sucess 
ReplaceGroup 2 1 //now Group 2 ceases to exist.
RemovePlayer 4 //success
RemovePlayer 1 //success
// now only group 1 exists ,with no players 
ReplaceGroup 4 5 //failure (both doesnt exist)
ReplaceGroup 5 4 //failure (both doesnt exist)
ReplaceGroup 5 1 //failure ( 5 doesnt exist)
ReplaceGroup 1 5 //failure (5 doesnt exist)
Quit
//IncreaseLevel(int PlayerID,int levelIncrease)
Init
AddGroup 1
IncreaseLevel 0 1 //invalid_input
//player doesn't exist
IncreaseLevel 1 0 //invalid_input
IncreaseLevel 1 1//failure(player doesn't exist.)
AddPlayer 1 1 1 //success
//from now on player 1 exists
IncreaseLevel 1 1 // success
IncreaseLevel 1 -1 // failure(trying to level 
RemovePlayer 1//success
//from now on RemovePlayer Doesn't exist anymore
IncreaseLevel 1 1 // failure
IncreaseLevel 1 -1 // Invalid_input
//playing with non-root Groups
AddGroup 2 //success
AddPlayer 2 2 2//success
//from now on player 2 exists
IncreaseLevel 2 2 // success
IncreaseLevel 2 -2 // failure(trying to level 
RemovePlayer 2//success
//from now on Player 2 Doesn't exist anymore
IncreaseLevel 2 2 // failure
IncreaseLevel 2 -2  // Invalid_input
//end of testing with lone groups
//replaceGroups Testing with it.
AddPlayer 2 2 2 //success
ReplaceGroups 2 1 //deleting Group 2 
IncreaseLevel 2 2 //success
IncreaseLevel 1 1 //success
AddPlayer 3 1 4 //success
ReplaceGroups 1 1//Invalid_input 
IncreaseLevel 2 2 //success
//end of Increase_level.
Quit

//GetHighestLevel
Init
AddGroup 1
AddPlayer 3 1 1
GetHighestLevel -1 //return 3
GetHighestLevel 1 // return 1
GetHighestLevel 0// INVALID_INPUT
GetHighestLevel 3 //FAILURE
RemovePlayer 3 // test the function after removing the only player
GetHighestLevel 1 //return -1 - because no player is in the group
GetHighestLevel -1 // return -1 because there are no players in the system
AddPlayer 1 1 1 //fine
GetHighestLevel 1 // return 1
AddPlayer 3 1 3 //OK
GetHighestLevel 1 //return 3
RemovePlayer 1 //test if the highest player chage even thogh its not suppose to, suppose to return 3
GetHighestLevel 1 //here
AddPlayer 1 1 1 // again
GetHighestLevel -3 //return 3
IncreaseLevel 1 5 
GetHighestLevel -3 //now suppose to return 1, after level was increase
GetHighestLevel 1// both in his group and in all players group
AddGroup 5
AddGroup 4
AddPlayer 2 5 9
GetHighestLevel 3 //FAILURE
GetHighestLevel -4 //return 2
RemovePlayer 1
GetHighestLevel -4 //still returns 2
RemovePlayer 2
GetHighestLevel 2 //FAILURE
GetHighestLevel -1 // 3 is the only player now
AddPlayer 5 4 1
ReplaceGroups 4 1 //SUCCESS, testing both of the groups for highest player
GetHighestLevel 1 //return 3
GetHighestLevel 4 // FAILURE
GetHighestLevel -3// return 3
AddPlayer 9 5 111
GetHighestLevel 5 // return 9
ReplaceGroups 1 5 //now the highest player stay in his group
GetHighestLevel 1 //FAILURE
GetHighestLevel 5 //return 9
GetHighestLevel -5// return 9
ReplaceGroups 1 5 //FAILURE allready happend and there is no group 1 now
GetHighestLevel 1//FAILURE
GetHighestLevel 5//return 9
GetHighestLevel 4//FAILURE there is no group 4
GetHighestLevel -1// return 9
RemovePlayer 9
GetHighestLevel 5// retrun -1 becuse there no players in the group 
GetHighestLevel 1 //FAILURE
GetHighestLevel -2//return -1
RemovePlayer 1 //FAILURE
GetHighestLevel 5//FAILUER
Quit
